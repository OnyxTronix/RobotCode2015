// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveTrainleft = NULL;
SpeedController* RobotMap::driveTrainright = NULL;
RobotDrive* RobotMap::driveTraindrive = NULL;
AnalogInput* RobotMap::stackevatorrangeFinder = NULL;
DigitalInput* RobotMap::stackevatorbottom = NULL;
Encoder* RobotMap::stackevatorencoder = NULL;
SpeedController* RobotMap::stackevatormotor = NULL;
DigitalInput* RobotMap::stackevatortop = NULL;
Compressor* RobotMap::armscomp = NULL;
Solenoid* RobotMap::armsopenArms = NULL;
Solenoid* RobotMap::armscloseArms = NULL;
Solenoid* RobotMap::collectoropenWheels = NULL;
Solenoid* RobotMap::collectorcloseWheels = NULL;
SpeedController* RobotMap::collectorleftWheel = NULL;
SpeedController* RobotMap::collectorrightWheel = NULL;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	driveTrainleft = new TalonSRX(1);
	lw->AddActuator("DriveTrain", "left", (TalonSRX*) driveTrainleft);
	
	driveTrainright = new TalonSRX(0);
	lw->AddActuator("DriveTrain", "right", (TalonSRX*) driveTrainright);
	
	driveTraindrive = new RobotDrive(driveTrainleft, driveTrainright);
	
	driveTraindrive->SetSafetyEnabled(true);
        driveTraindrive->SetExpiration(0.1);
        driveTraindrive->SetSensitivity(0.5);
        driveTraindrive->SetMaxOutput(1.0);
        

	stackevatorrangeFinder = new AnalogInput(0);
	lw->AddSensor("Stackevator", "rangeFinder", stackevatorrangeFinder);
	
	stackevatorbottom = new DigitalInput(6);
	lw->AddSensor("Stackevator", "bottom", stackevatorbottom);
	
	stackevatorencoder = new Encoder(7, 8, false, Encoder::k4X);
	lw->AddSensor("Stackevator", "encoder", stackevatorencoder);
	stackevatorencoder->SetDistancePerPulse(1.0);
        stackevatorencoder->SetPIDSourceParameter(Encoder::kDistance);
	stackevatormotor = new Talon(4);
	lw->AddActuator("Stackevator", "motor", (Talon*) stackevatormotor);
	
	stackevatortop = new DigitalInput(5);
	lw->AddSensor("Stackevator", "top", stackevatortop);
	
	armscomp = new Compressor(0);
	
	
	armsopenArms = new Solenoid(0, 1);
	lw->AddActuator("Arms", "openArms", armsopenArms);
	
	armscloseArms = new Solenoid(0, 0);
	lw->AddActuator("Arms", "closeArms", armscloseArms);
	
	collectoropenWheels = new Solenoid(0, 2);
	lw->AddActuator("Collector", "openWheels", collectoropenWheels);
	
	collectorcloseWheels = new Solenoid(0, 3);
	lw->AddActuator("Collector", "closeWheels", collectorcloseWheels);
	
	collectorleftWheel = new Victor(5);
	lw->AddActuator("Collector", "leftWheel", (Victor*) collectorleftWheel);
	
	collectorrightWheel = new Victor(7);
	lw->AddActuator("Collector", "rightWheel", (Victor*) collectorrightWheel);
	

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
