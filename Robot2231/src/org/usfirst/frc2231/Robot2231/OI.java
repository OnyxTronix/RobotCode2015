// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2231;

import org.usfirst.frc2231.Robot2231.commands.*;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton rotateLeftButton;
    public JoystickButton rotateRightButton;
    public Joystick driveStick;
    public JoystickButton liftElevatorButton;
    public JoystickButton lowerElevatorButton;
    public JoystickButton startCollecting;
    public JoystickButton deployButton;
    public JoystickButton withdrawButton;
    public JoystickButton collectLeftButton;
    public JoystickButton collectRightButton;
    public Joystick functionStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        functionStick = new Joystick(2);
        
        collectRightButton = new JoystickButton(functionStick, 6);
        collectRightButton.whileHeld(new CollectWithRight());
        collectLeftButton = new JoystickButton(functionStick, 5);
        collectLeftButton.whileHeld(new CollectWithLeft());
        withdrawButton = new JoystickButton(functionStick, 7);
        withdrawButton.whileHeld(new WithdrawCollector());
        deployButton = new JoystickButton(functionStick, 8);
        deployButton.whenPressed(new DeployCollector());
        startCollecting = new JoystickButton(functionStick, 2);
        startCollecting.whileHeld(new CollectCrate());
        lowerElevatorButton = new JoystickButton(functionStick, 1);
        lowerElevatorButton.whileHeld(new LowerElevator());
        liftElevatorButton = new JoystickButton(functionStick, 4);
        liftElevatorButton.whileHeld(new LiftElevator());
        driveStick = new Joystick(1);
        
        rotateRightButton = new JoystickButton(driveStick, 6);
        rotateRightButton.whileHeld(new RotateRight());
        rotateLeftButton = new JoystickButton(driveStick, 5);
        rotateLeftButton.whileHeld(new RotateLeft());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("RotateRight", new RotateRight());

        SmartDashboard.putData("RotateLeft", new RotateLeft());

        SmartDashboard.putData("DeployCollector", new DeployCollector());

        SmartDashboard.putData("WithdrawCollector", new WithdrawCollector());

        SmartDashboard.putData("CollectCrate", new CollectCrate());

        SmartDashboard.putData("CollectWithLeft", new CollectWithLeft());

        SmartDashboard.putData("CollectWithRight", new CollectWithRight());

        SmartDashboard.putData("LiftElevator", new LiftElevator());

        SmartDashboard.putData("LowerElevator", new LowerElevator());

        SmartDashboard.putData("ReleaseStack", new ReleaseStack());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveStick() {
        return driveStick;
    }

    public Joystick getFunctionStick() {
        return functionStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

