// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2231;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainfrontLeft;
    public static SpeedController driveTrainfrontRight;
    public static SpeedController driveTrainrearLeft;
    public static SpeedController driveTrainrearRight;
    public static RobotDrive driveTraindrive;
    public static SpeedController collectorleftCollectingWheel;
    public static SpeedController collectorrightCollectingWheel;
    public static SpeedController collectorleftDeployer;
    public static SpeedController collectorrigthDeployer;
    public static DigitalInput collectorleftDetector;
    public static DigitalInput collectorrightDetector;
    public static SpeedController stackevatorelevatorMotor1;
    public static SpeedController stackevatorelevatorMotor2;
    public static DigitalInput stackevatorreleaseSwitch;
    public static DigitalInput stackevatorlevel1Switch;
    public static DigitalInput stackevatorlevel2Switch;
    public static DigitalInput stackevatorTopSwitch;
    public static AnalogInput rangeFinderrangeFinder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static BuiltInAccelerometer mainAccelerometer;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainfrontLeft = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "frontLeft", (Talon) driveTrainfrontLeft);
        
        driveTrainfrontRight = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "frontRight", (Talon) driveTrainfrontRight);
        
        driveTrainrearLeft = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "rearLeft", (Talon) driveTrainrearLeft);
        
        driveTrainrearRight = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "rearRight", (Talon) driveTrainrearRight);
        
        driveTraindrive = new RobotDrive(driveTrainfrontLeft, driveTrainrearLeft,
              driveTrainfrontRight, driveTrainrearRight);
        
        driveTraindrive.setSafetyEnabled(true);
        driveTraindrive.setExpiration(0.1);
        driveTraindrive.setSensitivity(0.5);
        driveTraindrive.setMaxOutput(1.0);

        collectorleftCollectingWheel = new Victor(7);
        LiveWindow.addActuator("Collector", "leftCollectingWheel", (Victor) collectorleftCollectingWheel);
        
        collectorrightCollectingWheel = new Victor(8);
        LiveWindow.addActuator("Collector", "rightCollectingWheel", (Victor) collectorrightCollectingWheel);
        
        collectorleftDeployer = new Talon(9);
        LiveWindow.addActuator("Collector", "leftDeployer", (Talon) collectorleftDeployer);
        
        collectorrigthDeployer = new Talon(10);
        LiveWindow.addActuator("Collector", "rigthDeployer", (Talon) collectorrigthDeployer);
        
        collectorleftDetector = new DigitalInput(0);
        LiveWindow.addSensor("Collector", "leftDetector", collectorleftDetector);
        
        collectorrightDetector = new DigitalInput(1);
        LiveWindow.addSensor("Collector", "rightDetector", collectorrightDetector);
        
        stackevatorelevatorMotor1 = new Victor(5);
        LiveWindow.addActuator("Stackevator", "elevatorMotor1", (Victor) stackevatorelevatorMotor1);
        
        stackevatorelevatorMotor2 = new Victor(4);
        LiveWindow.addActuator("Stackevator", "elevatorMotor2", (Victor) stackevatorelevatorMotor2);
        
        stackevatorreleaseSwitch = new DigitalInput(2);
        LiveWindow.addSensor("Stackevator", "releaseSwitch", stackevatorreleaseSwitch);
        
        stackevatorlevel1Switch = new DigitalInput(3);
        LiveWindow.addSensor("Stackevator", "level1Switch", stackevatorlevel1Switch);
        
        stackevatorlevel2Switch = new DigitalInput(4);
        LiveWindow.addSensor("Stackevator", "level2Switch", stackevatorlevel2Switch);
        
        rangeFinderrangeFinder = new AnalogInput(0);
        LiveWindow.addSensor("RangeFinder", "rangeFinder", rangeFinderrangeFinder);
        
        stackevatorTopSwitch = new DigitalInput(7);
        LiveWindow.addSensor("StackEvator", "topSwitch", stackevatorTopSwitch);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        mainAccelerometer = new BuiltInAccelerometer();
        LiveWindow.addSensor("DriveTrain", "Main Accelerometer", mainAccelerometer);
        
        
    }
}
