// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2231.subsystems;

import org.usfirst.frc2231.Robot2231.RobotMap;
import org.usfirst.frc2231.Robot2231.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Stackevator extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogInput rangeFinder = RobotMap.stackevatorrangeFinder;
    DigitalInput bottom = RobotMap.stackevatorbottom;
    Encoder encoder = RobotMap.stackevatorencoder;
    SpeedController motor = RobotMap.stackevatormotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    final double LOWER_SPEED = -0.2;
    final double RAISE_SPEED = 0.6;
    
    public static final double LEVEL_1_POSITION = 450;
    public static final double LEVEL_2_POSITION = 950;
    public static final double GOING_DOWN_OFFSET = 50;
    
    boolean isCalibrated;
    boolean isMovingWithPID;
    boolean isGoingDown;
    
    // Initialize your subsystem here
    public Stackevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Stackevator", 0.2, 0.1, 0.07);
        setAbsoluteTolerance(12.0);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Stackevator", "PIDSubsystem Controller", getPIDController());
        getPIDController().setOutputRange(-0.2, 0.6);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        isCalibrated = false;
        isMovingWithPID = false;
        isGoingDown = false;
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new LiftByJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return encoder.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    public void setSetpoint(double setpoint) {
		super.setSetpoint(setpoint);
		isMovingWithPID = true;
	}
    
    public void disable() {
    	super.disable();
    	isMovingWithPID = false;
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        motor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    public boolean getCalibrated(){
    	//@summary: return if the system is calibrated
    	return isCalibrated;
    }
    
    public void setCalibrated(boolean newValue) {
    	//@summary: sets the calibration state of the system
		isCalibrated = newValue;
	}
    
    public boolean isGoingDown(){
    	//@summary: return if the system is going down
    	return isGoingDown;
    }
    
    public void setGoingDown(boolean newValue) {
    	//@summary: set if the system is going down
    	isGoingDown = newValue;
    }
    
    public void lower() {
    	//@summary: lowers the system if the system hasn't reached the bottom
    	if (!reachedBottom()) {
    		motor.set(LOWER_SPEED);
    		isGoingDown= true;
    	}
	}
    
    public void raise() {
    	//@summary: raises the system TODO: add condition when top microswitch is attached
    	motor.set(RAISE_SPEED);
    	isGoingDown = false;
	}
    
    public boolean reachedBottom() {
    	//@summary: returns if the system is at the bottom(by microswitch value)
    	return !bottom.get();
	}
    
    public void stop() {
    	//@summary: stops the motor and the PID system  
    	motor.disable();
    	disable();
    	isGoingDown = false;
    	isMovingWithPID = false;
		
	}
    
    public void setByJoystick(Joystick stick) {
    	//@summary: move the system manually by with a joystick
    	double setValue = stick.getRawAxis(3)-stick.getRawAxis(2);
    	boolean goingDown = (setValue < 0);
    	if (!(goingDown && reachedBottom())) {
        	setGoingDown(goingDown);        	
        	motor.set(setValue);
    	}
	}
    
    public void resetEncoder() {
    	//@summary: resets the encoder
		encoder.reset();
	}
    
    public double getRange() {
    	final double suppliedVoltage=5;
    	double voltsPerInch=suppliedVoltage/512;
    	System.out.println(rangeFinder.getAverageVoltage()/voltsPerInch);
    	return rangeFinder.getAverageVoltage()/voltsPerInch;
    	//return rangeFinder.getVoltage()/(1.48112*Math.pow(10, -3));
    }
    public void displayToSmartDashbaord() {
		SmartDashboard.putNumber("Stackevator position", getPosition());
		SmartDashboard.putNumber("Stackevator setpoint", getSetpoint());
		SmartDashboard.putBoolean("Stackevator Is Calibrated", getCalibrated());
		SmartDashboard.putBoolean("Stackevator Reached Bottom", reachedBottom());
		SmartDashboard.putBoolean("Stackevator Moving with PID", isMovingWithPID);
		SmartDashboard.putBoolean("Stackevator Going Down", isGoingDown);
		
	}
}
