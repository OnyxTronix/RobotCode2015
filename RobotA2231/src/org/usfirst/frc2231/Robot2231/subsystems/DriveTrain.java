// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2231.subsystems;

import org.usfirst.frc2231.Robot2231.RobotMap;
import org.usfirst.frc2231.Robot2231.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.Joystick.RumbleType;
import edu.wpi.first.wpilibj.command.Subsystem;

import org.usfirst.frc2231.utils.*;


/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController left = RobotMap.driveTrainleft;
    SpeedController right = RobotMap.driveTrainright;
    RobotDrive drive = RobotMap.driveTraindrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    BuiltInAccelerometer mainAccelerometer = RobotMap.mainAccelerometer;
    
    double TURN_MAGNITUDE = 0.7;
    double FORWARD_MAGNITUDE = -0.5;
    int LEFT_AXIS_INDEX = 1;
	int RIGHT_AXIS_INDEX = 4;


    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void turn(Direction direction) {
    	// @param direction: the direction to turn, LEFT or RIGHT
		drive.drive(TURN_MAGNITUDE, direction.value);
	}
    
    public void forward() {
    	drive.drive(FORWARD_MAGNITUDE, 0);
    	
    }
    
    public void backward() {
    	drive.drive(-FORWARD_MAGNITUDE, 0);
    }

    
    public void stop() {
		drive.drive(0, 0);
	}
    
    public void arcadeDrive(Joystick stick) {
    	drive.arcadeDrive(stick.getRawAxis(LEFT_AXIS_INDEX), -stick.getRawAxis(RIGHT_AXIS_INDEX));
    	System.out.println("Axis value: " + stick.getRawAxis(LEFT_AXIS_INDEX));
    	if (stick.getRawAxis(LEFT_AXIS_INDEX) < 0.15 && stick.getRawAxis(LEFT_AXIS_INDEX) > -0.1)
    		stopGradually();
	}
    
    
    public void tankDrive(double leftValue, double rightValue) {
    	drive.tankDrive(leftValue, rightValue);	
	}
  
    
    public boolean isMovingForward(){
		return left.get() < 0 && right.get() > 0;
	}
    
    public void stopGradually()
    {
    	if (isMovingForward())
    	{
    		double currentSpeed = Math.abs(left.get());
	    	while (currentSpeed >= 0.2)
	    	{
	    		currentSpeed -= 0.02;
	    		System.out.println("Current Speed: " + currentSpeed);
	    		left.set(-currentSpeed);
	    		right.set(currentSpeed);
	    		try
	    		{
	    			Thread.sleep(100);
	    		}
	    		catch (InterruptedException e)
	    		{
	    			e.printStackTrace();
	    		}
	    	}
    	}
    	else if (isMovingBackword())
    	{
    		double currentSpeed = Math.abs(left.get());
	    	while (currentSpeed >= 0.2)
	    	{
	    		currentSpeed -= 0.02;
	    		System.out.println("Current Speed: " + currentSpeed);
	    		left.set(currentSpeed);
	    		right.set(-currentSpeed);
	    		try
	    		{
	    			Thread.sleep(56);
	    		}
	    		catch (InterruptedException e)
	    		{
	    			e.printStackTrace();
	    		}
	    	}
    	}
    }
    
    public boolean isMovingBackword() {
		// TODO Auto-generated method stub
    	return left.get() > 0 && right.get() < 0;
	}

	public double minMotorSpeed()
    {
    	return Math.min(left.get(), right.get());
    }
}

